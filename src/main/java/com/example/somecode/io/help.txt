=======注意事项======
1.字符编码格式
    str.getBytes(StandardCharsets.UTF_8)
    字节转换流
2.是否追加写
3.是否调用flush()方法
    使用的是没有内部缓冲区的输出流，或者需要确保数据立即写入到目标设备中，那么在关闭流之前调用 flush() 方法是一个好的做法。
    对于使用了缓冲区的流，关闭流时会自动刷新缓冲区，因此在这种情况下可以省略显式调用 flush() 方法
    flush() ： 刷新缓冲区，流对象可以继续使用。
    close()： 先刷新缓冲区，然后通知系统关闭资源,流对象不可以再被使用。

    只有字节流输出流FileOutputStream和序列化输出流ObjectOutputStream不需要flush()就能直接写入文件
    FileWriter字符输出流，BufferedOutputStream缓冲字节输出流，BufferedWriter缓冲字符输出流，
    OutputStreamWriter转换输出流都需要刷新flush方法才能写到文件上。

    所以总结一下：如果是和Writer相关（内置缓冲区）或者是内置了缓冲数组的流都需要flush()这个过程才能写入文件

    但是为了保险起见：以后只要涉及相关输出流，不论是字节流还是字符流，只要是OutputStream和Writer相关的，都加上flush()保险，
    当然如果是直接close()就不用flush()了，但是保不齐以后增加代码会对数据进行操作，这个时候就容易出问题了



=======介绍======
1. 字节流（InputStream / OutputStream）
字节流在Java中主要用于处理二进制数据。它们可以用于读写任何类型的数据，如图像，音频，视频等

1.1 文件字节流 FileInputStream/FileOutputStream
1.2 字节缓冲流 BufferedInputStream/BufferedOutputStream
1.3 字节数组流 ByteArrayInputStream/ByteArrayOutputStream
1.4 数据流 DataInputStream/DataOutputStream
1.5 对象流 ObjectInputStream/ObjectOutputStream
    注意，对象流操作的对象必须实现了序列化
1.6 字节转换流 InputStreamReader/OutputStreamWriter
    注意，编码格式
1.7 String转换流 StringBufferInputStream
1.8 整合流 SequenceInputStream
    将两个或多个 InputStream 对象转换成一个 InputStream


2. 字符流（Reader / Writer）
字符流主要用于处理文本数据，它们按字符而非字节进行操作，因此更适合处理文本数据

2.1 文件字符流 FileReader/FileWriter
2.2 字符缓冲流 BufferedReader/BufferedWriter
2.3 字符数组流 CharArrayReader/CharArrayWriter

3. 打印流（PrintStream / PrintWriter）
打印流是另一种特殊的流，主要用于创建格式化的输出，而不是原始的字节。这种类型的流非常适合打印输出，或者写入文本文件

4. 标准流
System.in: 标准输入流
System.out: 标准输出流
System.err: 标准错误

5.IOUtils类
IOUtils.read(InputStream input, byte[] buffer)
IOUtils.copy(InputStream input, OutputStream output)
IOUtils.toInputStream(String input, String encoding)
IOUtils.toString(Reader input)
IOUtils.buffer(InputStream input)
IOUtils.toByteArray(InputStream input)
IOUtils.write(byte[] data, OutputStream output)
IOUtils.close(URLConnection conn)